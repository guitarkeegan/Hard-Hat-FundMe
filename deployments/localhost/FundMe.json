{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunder",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfec00e2c7de391264d09cfc6e1809845a7c42df9bffebce7ed0d34f9ed142da8",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1051482",
    "logsBloom": "0x
    "blockHash": "0xf13d1e279ce27d463238a954f1ef484f8c179aef271958a78e8a4104ad180b03",
    "transactionHash": "0xfec00e2c7de391264d09cfc6e1809845a7c42df9bffebce7ed0d34f9ed142da8",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1051482",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "8f77a809874ce4116420801908dc8dd0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"This implements price feeds as our library\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"This contract is to demo a sample funding contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror FundMe__NotOwner();\\n\\ncontract FundMe {\\n    using PriceConverter for uint256;\\n\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    address[] private s_funders;\\n\\n    // Could we make this constant?  /* hint: no! We should make it immutable! */\\n    address private immutable i_owner;\\n    uint256 public constant MINIMUM_USD = 50 * 10 ** 18;\\n\\n    AggregatorV3Interface public s_priceFeed;\\n    \\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    /** \\n     * \\n     * @notice This contract is to demo a sample funding contract\\n     * @dev This implements price feeds as our library\\n     */\\n    function fund() public payable {\\n        require(msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n    \\n    modifier onlyOwner {\\n        // require(msg.sender == owner);\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n    \\n    function withdraw() public onlyOwner {\\n        for (uint256 funderIndex=0; funderIndex < s_funders.length; funderIndex++){\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // // transfer\\n        // payable(msg.sender).transfer(address(this).balance);\\n        // // send\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess, \\\"Send failed\\\");\\n        // call\\n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    function cheaperWithdraw() public payable onlyOwner {\\n        address[] memory funders = s_funders;\\n        //mappings can't be in memory\\n        for (uint256 funderIndex=0; funderIndex < funders.length; funderIndex++){\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        (bool success, ) = i_owner.call{value: address (this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    function getOwner() public view returns(address) {\\n        return i_owner;\\n    }\\n\\n    function getFunder(uint256 index) public view returns(address){\\n        return s_funders[index];\\n    }\\n\\n    function getAddressToAmountFunder(address funder) public view returns(uint256){\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns(AggregatorV3Interface){\\n        return s_priceFeed;\\n    }\\n}\\n\\n// Concepts we didn't cover yet (will cover in later sections)\\n// 1. Enum\\n// 2. Events\\n// 3. Try / Catch\\n// 4. Function Selector\\n// 5. abi.encode / decode\\n// 6. Hash with keccak256\\n// 7. Yul / Assembly\\n\\n\\n\",\"keccak256\":\"0xc24f1c55e4de7e73dc1367daf0a4b557bc99ab89d0f8cc7bc768d121032759e9\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Why is this a library and not abstract?\\n// Why not an interface?\\nlibrary PriceConverter {\\n    // We could make this public, but then we'd have to deploy it\\n    function getPrice(AggregatorV3Interface priceFeed ) internal view returns (uint256) {\\n        // Goerli ETH / USD Address\\n        // https://docs.chain.link/docs/ethereum-addresses/\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n    }\\n\\n    // 1000000000\\n    function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\",\"keccak256\":\"0x9b808bb3d0aacfcfd569a85e1a58aa79393f33a822e6ce8383d58c4809e3f8b9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200132d3803806200132d833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c6111a762000186600039600081816102040152818161045301528181610625015261081b01526111a76000f3fe6080604052600436106100865760003560e01c80639e87a5cd116100595780639e87a5cd146101235780639ee7eecb1461014e578063b60d42881461018b578063be2693f014610195578063d7b4750c1461019f57610086565b80630ec3b0271461008b5780633ccfd60b146100b65780636b69a592146100cd578063893d20e8146100f8575b600080fd5b34801561009757600080fd5b506100a06101dc565b6040516100ad9190610afb565b60405180910390f35b3480156100c257600080fd5b506100cb610202565b005b3480156100d957600080fd5b506100e2610442565b6040516100ef9190610b2f565b60405180910390f35b34801561010457600080fd5b5061010d61044f565b60405161011a9190610b6b565b60405180910390f35b34801561012f57600080fd5b50610138610477565b6040516101459190610afb565b60405180910390f35b34801561015a57600080fd5b5061017560048036038101906101709190610bb7565b6104a1565b6040516101829190610b2f565b60405180910390f35b6101936104e9565b005b61019d610623565b005b3480156101ab57600080fd5b506101c660048036038101906101c19190610c10565b6108b1565b6040516101d39190610b6b565b60405180910390f35b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610287576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b600180549050811015610332576000600182815481106102ad576102ac610c3d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061032a90610c9b565b91505061028a565b50600067ffffffffffffffff81111561034e5761034d610ce4565b5b60405190808252806020026020018201604052801561037c5781602001602082028036833780820191505090505b50600190805190602001906103929291906109d5565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516103b990610d44565b60006040518083038185875af1925050503d80600081146103f6576040519150601f19603f3d011682016040523d82523d6000602084013e6103fb565b606091505b505090508061043f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043690610db6565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6802b5e3af16b1880000610528600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108f990919063ffffffff16565b1015610569576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056090610e22565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105b79190610e42565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106a8576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561072c57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106e2575b5050505050905060005b81518110156107b657600082828151811061075457610753610c3d565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806107ae90610c9b565b915050610736565b50600067ffffffffffffffff8111156107d2576107d1610ce4565b5b6040519080825280602002602001820160405280156108005781602001602082028036833780820191505090505b50600190805190602001906108169291906109d5565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161085d90610d44565b60006040518083038185875af1925050503d806000811461089a576040519150601f19603f3d011682016040523d82523d6000602084013e61089f565b606091505b50509050806108ad57600080fd5b5050565b6000600182815481106108c7576108c6610c3d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061090583610935565b90506000670de0b6b3a7640000858361091e9190610e98565b6109289190610f21565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561097e57600080fd5b505afa158015610992573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b69190610fdf565b5050509150506402540be400816109cd919061105a565b915050919050565b828054828255906000526020600020908101928215610a4e579160200282015b82811115610a4d5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109f5565b5b509050610a5b9190610a5f565b5090565b5b80821115610a78576000816000905550600101610a60565b5090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610ac1610abc610ab784610a7c565b610a9c565b610a7c565b9050919050565b6000610ad382610aa6565b9050919050565b6000610ae582610ac8565b9050919050565b610af581610ada565b82525050565b6000602082019050610b106000830184610aec565b92915050565b6000819050919050565b610b2981610b16565b82525050565b6000602082019050610b446000830184610b20565b92915050565b6000610b5582610a7c565b9050919050565b610b6581610b4a565b82525050565b6000602082019050610b806000830184610b5c565b92915050565b600080fd5b610b9481610b4a565b8114610b9f57600080fd5b50565b600081359050610bb181610b8b565b92915050565b600060208284031215610bcd57610bcc610b86565b5b6000610bdb84828501610ba2565b91505092915050565b610bed81610b16565b8114610bf857600080fd5b50565b600081359050610c0a81610be4565b92915050565b600060208284031215610c2657610c25610b86565b5b6000610c3484828501610bfb565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610ca682610b16565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610cd957610cd8610c6c565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d2e600083610d13565b9150610d3982610d1e565b600082019050919050565b6000610d4f82610d21565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610da0600b83610d59565b9150610dab82610d6a565b602082019050919050565b60006020820190508181036000830152610dcf81610d93565b9050919050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610e0c601b83610d59565b9150610e1782610dd6565b602082019050919050565b60006020820190508181036000830152610e3b81610dff565b9050919050565b6000610e4d82610b16565b9150610e5883610b16565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610e8d57610e8c610c6c565b5b828201905092915050565b6000610ea382610b16565b9150610eae83610b16565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610ee757610ee6610c6c565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f2c82610b16565b9150610f3783610b16565b925082610f4757610f46610ef2565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f7181610f52565b8114610f7c57600080fd5b50565b600081519050610f8e81610f68565b92915050565b6000819050919050565b610fa781610f94565b8114610fb257600080fd5b50565b600081519050610fc481610f9e565b92915050565b600081519050610fd981610be4565b92915050565b600080600080600060a08688031215610ffb57610ffa610b86565b5b600061100988828901610f7f565b955050602061101a88828901610fb5565b945050604061102b88828901610fca565b935050606061103c88828901610fca565b925050608061104d88828901610f7f565b9150509295509295909350565b600061106582610f94565b915061107083610f94565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156110af576110ae610c6c565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156110ec576110eb610c6c565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561112957611128610c6c565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561116657611165610c6c565b5b82820290509291505056fea2646970667358221220e0d5b724771a5dfe58a862ba1b0e98eaf5a025ae4540e691d95981bc231b3d1d64736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100865760003560e01c80639e87a5cd116100595780639e87a5cd146101235780639ee7eecb1461014e578063b60d42881461018b578063be2693f014610195578063d7b4750c1461019f57610086565b80630ec3b0271461008b5780633ccfd60b146100b65780636b69a592146100cd578063893d20e8146100f8575b600080fd5b34801561009757600080fd5b506100a06101dc565b6040516100ad9190610afb565b60405180910390f35b3480156100c257600080fd5b506100cb610202565b005b3480156100d957600080fd5b506100e2610442565b6040516100ef9190610b2f565b60405180910390f35b34801561010457600080fd5b5061010d61044f565b60405161011a9190610b6b565b60405180910390f35b34801561012f57600080fd5b50610138610477565b6040516101459190610afb565b60405180910390f35b34801561015a57600080fd5b5061017560048036038101906101709190610bb7565b6104a1565b6040516101829190610b2f565b60405180910390f35b6101936104e9565b005b61019d610623565b005b3480156101ab57600080fd5b506101c660048036038101906101c19190610c10565b6108b1565b6040516101d39190610b6b565b60405180910390f35b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610287576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b600180549050811015610332576000600182815481106102ad576102ac610c3d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061032a90610c9b565b91505061028a565b50600067ffffffffffffffff81111561034e5761034d610ce4565b5b60405190808252806020026020018201604052801561037c5781602001602082028036833780820191505090505b50600190805190602001906103929291906109d5565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516103b990610d44565b60006040518083038185875af1925050503d80600081146103f6576040519150601f19603f3d011682016040523d82523d6000602084013e6103fb565b606091505b505090508061043f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043690610db6565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6802b5e3af16b1880000610528600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108f990919063ffffffff16565b1015610569576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056090610e22565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105b79190610e42565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106a8576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561072c57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106e2575b5050505050905060005b81518110156107b657600082828151811061075457610753610c3d565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806107ae90610c9b565b915050610736565b50600067ffffffffffffffff8111156107d2576107d1610ce4565b5b6040519080825280602002602001820160405280156108005781602001602082028036833780820191505090505b50600190805190602001906108169291906109d5565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161085d90610d44565b60006040518083038185875af1925050503d806000811461089a576040519150601f19603f3d011682016040523d82523d6000602084013e61089f565b606091505b50509050806108ad57600080fd5b5050565b6000600182815481106108c7576108c6610c3d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061090583610935565b90506000670de0b6b3a7640000858361091e9190610e98565b6109289190610f21565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561097e57600080fd5b505afa158015610992573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b69190610fdf565b5050509150506402540be400816109cd919061105a565b915050919050565b828054828255906000526020600020908101928215610a4e579160200282015b82811115610a4d5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109f5565b5b509050610a5b9190610a5f565b5090565b5b80821115610a78576000816000905550600101610a60565b5090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610ac1610abc610ab784610a7c565b610a9c565b610a7c565b9050919050565b6000610ad382610aa6565b9050919050565b6000610ae582610ac8565b9050919050565b610af581610ada565b82525050565b6000602082019050610b106000830184610aec565b92915050565b6000819050919050565b610b2981610b16565b82525050565b6000602082019050610b446000830184610b20565b92915050565b6000610b5582610a7c565b9050919050565b610b6581610b4a565b82525050565b6000602082019050610b806000830184610b5c565b92915050565b600080fd5b610b9481610b4a565b8114610b9f57600080fd5b50565b600081359050610bb181610b8b565b92915050565b600060208284031215610bcd57610bcc610b86565b5b6000610bdb84828501610ba2565b91505092915050565b610bed81610b16565b8114610bf857600080fd5b50565b600081359050610c0a81610be4565b92915050565b600060208284031215610c2657610c25610b86565b5b6000610c3484828501610bfb565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610ca682610b16565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610cd957610cd8610c6c565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d2e600083610d13565b9150610d3982610d1e565b600082019050919050565b6000610d4f82610d21565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610da0600b83610d59565b9150610dab82610d6a565b602082019050919050565b60006020820190508181036000830152610dcf81610d93565b9050919050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610e0c601b83610d59565b9150610e1782610dd6565b602082019050919050565b60006020820190508181036000830152610e3b81610dff565b9050919050565b6000610e4d82610b16565b9150610e5883610b16565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610e8d57610e8c610c6c565b5b828201905092915050565b6000610ea382610b16565b9150610eae83610b16565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610ee757610ee6610c6c565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f2c82610b16565b9150610f3783610b16565b925082610f4757610f46610ef2565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f7181610f52565b8114610f7c57600080fd5b50565b600081519050610f8e81610f68565b92915050565b6000819050919050565b610fa781610f94565b8114610fb257600080fd5b50565b600081519050610fc481610f9e565b92915050565b600081519050610fd981610be4565b92915050565b600080600080600060a08688031215610ffb57610ffa610b86565b5b600061100988828901610f7f565b955050602061101a88828901610fb5565b945050604061102b88828901610fca565b935050606061103c88828901610fca565b925050608061104d88828901610f7f565b9150509295509295909350565b600061106582610f94565b915061107083610f94565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156110af576110ae610c6c565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156110ec576110eb610c6c565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561112957611128610c6c565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561116657611165610c6c565b5b82820290509291505056fea2646970667358221220e0d5b724771a5dfe58a862ba1b0e98eaf5a025ae4540e691d95981bc231b3d1d64736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "fund()": {
        "details": "This implements price feeds as our library"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "This contract is to demo a sample funding contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 58,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 61,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 73,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}